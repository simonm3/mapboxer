Project
=======
objectives = boundary reviews + campaign targetng
sponsor = Dave Mcobb
database of data
    ward turnout beyond canvassing (known from marked register)
    votes by local area (already modeled)
what data already
    canvas responses
    demographics?
    polling district boundaries

maps
====

supergen or BGC (generalized) not BFE (full extent), BFC (full coastal)
results
    teale
    tabular
    repeat all
    subtotals off
    grand totals off

Some observations
=================
* Half of wards in 2015 had no Libdem candidate. Many were previously Libdem council and MP seats especially in the South West.
* "No seat" wards are clustered. Should we spend more on recruitment?
* Strong Libdem areas are clustered


TODO
questions for teale
    district, county, other??
    2010 only 16K wards
boundary data
    boundaries 2010, 2012-2014 missing
results data
    2017/2018 complete in parts
    2018/2019 incomplete
multiple winners in ward. LD total / competitor still valid
combining with different borders e.g. 2011/2015
    even spread ld, sum by pixel?
    interpolate each year and merge?
"""

# charts #################################################################

    altair => vega => d3.js
    nvd3 => nvd3.js => d3.js
    plotly express (functions ) => go (objects) => plotly.js => d3.js
        figure (data/traces, layout)

# maps #################################################################

qgis => qgis2web => openlayers, leaflet, mapboxgl
    positives
        wide functionality
        easy to convert and align sources
        easy to select layers to show
    negatives
        bad design of menus
        python only in own environment
        hard to use
        qgis2web is slow to create maps and sometimes not working
        qgis2web maps less responsive
folium => leaflet.js
    simple maps only
google earth engine
    common api for large collection of satellite images
    only free source of high res satellite  images
    parallel processing
    javascript only. python weak documentation.
    difficult api
plotly express (functions ) => go (objects) => plotly.js => stackgl.js => webgl
                                                         => mapboxgl.js => webgl

# mapbox ###########################################################

mapboxgl.js => webgl
    vector tiles displayed in canvas (client side)
    faster and easier to change styles
    dataset (geometry/data) => tileset vector/raster at 22 zoom levels
    style = json applied to tileset.
datasets
    streets, satellite etc..
    geojson (geometries + properties)
studio editor
datasets editor
    geojosn => tileset (dataset + styles)
    multipolygon converted to polygon  
apis
    mapbox (python api) 
    geocoding
    directions
    turf.js (spatial analysis)

# mapbox potential python api #####################################

mapboxgl approach
    javascript templates

render
    map = html/css/js

map elements
    rootproperties
    source
    layer

additional elements
    layer checkboxes

events
    python2js
    onclick checkbox
    drag checkboxes in sequence
    set styles e.g. opacity

data/styles
    inheritable objects
    store as dict, yaml, dotdict, class => json

quick maps using function templates => combination of objects
    common map types with default settings

link to mapbox
    download, upload
    documentation
    autocomplete

# other GIS #########################################################

geopandas (geometries + properties) => shapely, gdal, fiona, geojson

dash
    flask => json
    react
    plotly.js